generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * MODELS
 * =========================
 */

model User {
  id                Int       @id @default(autoincrement()) @map("user_id")
  publicId          String    @unique @default(dbgenerated("gen_random_uuid()")) @map("user_public_id") @db.Uuid
  email             String    @unique @map("user_email") @db.VarChar(255)
  passwordHash      String    @map("user_password_hash") @db.VarChar(255)
  name              String    @map("user_name") @db.VarChar(100)
  isActive          Boolean   @default(true) @map("user_is_active")
  emailVerified     Boolean   @default(false) @map("user_email_verified")
  emailToken        String?   @map("user_email_token") @db.VarChar(100)
  emailTokenExpires DateTime? @map("user_email_token_expires_at") @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @map("user_created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @map("user_updated_at") @db.Timestamptz(6)
  resetToken        String?   @map("user_reset_token")
  resetTokenExpires DateTime? @map("user_reset_token_expires_at") @db.Timestamptz(6)
  tokenVersion      Int       @default(0) @map("user_token_version")

  accounts        Account[]
  categories      Category[]
  incomeSources   IncomeSource[]
  TransactionRule TransactionRule[]

  @@map("fin_users")
}

model Account {
  id          Int       @id @default(autoincrement()) @map("account_id")
  name        String    @map("account_name") @db.VarChar(100)
  type        String    @map("account_type") @db.VarChar(50)
  openingBalance BigInt   @default(0) @map("account_balance")
  openingDate    DateTime? @map("account_opening_date") @db.Timestamptz(6)
  description String?   @map("account_description")
  isDeleted   Boolean   @default(false) @map("account_is_deleted")
  createdAt   DateTime  @default(now()) @map("account_created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("account_updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("account_deleted_at") @db.Timestamptz(6)

  userId Int  @map("account_user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  transactions Transaction[]

  @@map("fin_accounts")
}

model Category {
  id          Int     @id @default(autoincrement()) @map("category_id")
  name        String  @map("category_name") @db.VarChar(100)
  description String? @map("category_description")

  // REQUIRED: scalar FK + relation to User
  userId Int  @map("category_user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Tree fields
  parentId Int?       @map("category_parent_id")
  parent   Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children Category[] @relation("CategoryChildren")

  sortOrder Int          @default(0) @map("category_sort_order")
  icon      String?      @map("category_icon")
  color     String?      @map("category_color")
  archived  Boolean      @default(false) @map("category_is_archived")
  type      CategoryKind @default(expense) @map("category_type")

  // Other relations
  transactions Transaction[]

  // Match your DB index name if you created it in SQL:
  @@index([userId, parentId, sortOrder], map: "fin_categories_category_user_id_category_parent_id_category_idx")
  @@map("fin_categories")
}

model IncomeSource {
  id          Int     @id @default(autoincrement()) @map("income_source_id")
  name        String  @map("income_source_name") @db.VarChar(100)
  description String? @map("income_source_description")

  userId Int  @map("income_source_user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  transactions Transaction[]

  @@unique([userId, name])
  @@map("fin_income_sources")
}

enum TransactionKind {
  DEBIT
  CREDIT
}

model Transaction {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @map("transaction_id") @db.Uuid
  date        DateTime        @default(now()) @map("transaction_date") @db.Timestamptz(6)
  amount      BigInt          @map("transaction_amount")
  kind        TransactionKind @default(DEBIT)
  description String          @map("transaction_description") @db.VarChar(255)
  isSaving    Boolean         @default(false) @map("transaction_is_saving")
  notes       String?         @map("transaction_notes")

  categoryId     Int? @map("transaction_category_id")
  accountId      Int  @map("transaction_account_id")
  incomeSourceId Int? @map("transaction_income_source_id")

  transferId String? @map("transaction_transfer_id") @db.Uuid


  createdAt DateTime @default(now()) @map("transaction_created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("transaction_updated_at") @db.Timestamptz(6)

  account      Account       @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category     Category?     @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  incomeSource IncomeSource? @relation(fields: [incomeSourceId], references: [id], onUpdate: NoAction)

  @@index([transferId])
  @@map("fin_transactions")
}

model TransactionRule {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String
  pattern       String
  isRegex       Boolean @default(false)
  caseSensitive Boolean @default(false)
  priority      Int     @default(100)
  isActive      Boolean @default(true)

  categoryId Int?
  kind       TransactionKind?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isActive, priority])
  @@map("fin_transaction_rules")
}

/**
 * =========================
 * ENUMS (mapped to DB enums)
 * =========================
 */

enum Frequency {
  daily
  weekly
  monthly
  yearly

  @@map("frequency_enum")
}

enum Weekday {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday

  @@map("weekday_enum")
}

enum CategoryKind {
  expense
  income
  transfer

  @@map("category_kind")
}
